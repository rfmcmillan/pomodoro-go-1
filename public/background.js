(()=>{"use strict";const{storage:e,tabs:o,runtime:t,alarms:s,scripting:r}=chrome;chrome.action.onClicked.addListener((e=>{console.log("new tab created"),chrome.tabs.create({url:"index.html"})})),{active:!1,currentTab:null,sessionTime:0,appStarted:!1,getCurrentTab:async function(){let[e]=await chrome.tabs.query({active:!0,currentWindow:!0});return e},init:async function(){try{this.active||(console.log("running app!"),e.sync.clear(),s.clearAll((()=>{console.log("alarms are cleared")})),this.listenForAlarm(),this.listenToExternalMessages(),this.listenToStorage(),this.listenToTabs(),this.listenForBlockedSite(),this.listenForDashboardRedirect(),this.active=!0),this.currentTab=await this.getCurrentTab()}catch(e){console.log("issue with start up in background js",e)}},createAlarm:function(){chrome.alarms.create("timer",{when:Date.now()+this.sessionTime}),this.alarmCreated=!0,chrome.storage.sync.set({alarmCreated:!0}),console.log("alarm creeated!!!")},resetStorage(){e.local.set({sessionTime:0,timerOn:!1,currentSession:{},alarmCreated:!1,sessionComplete:!1,user:{},email:""})},listenToExternalMessages:function(){return t.onMessageExternal.addListener((async(e,o,t)=>{try{if("create-timer"===e.message&&(this.sessionTime=e.sessionTime,this.createAlarm()),"continue-alarm"===e.message&&(console.log("you want me to start an alarm?"),s.clearAll((()=>{console.log("alarms are cleared again"),s.create("timer",{when:Date.now()+e.sessionTime}),console.log("new alarm created")}))),"timer-done"===e.message&&s.create("timer",{when:Date.now()}),"set-blocked-sites"===e.message){console.log("set-blocked-sites message received");const o=[];e.blockedSites.forEach((e=>{o.push(e.siteUrl)})),chrome.storage.sync.set({blocked:o,currUser:e.currUser},(()=>{console.log("sites are blocked in chrome")})),console.log("blocked sites",e),chrome.storage.sync.get(null,(e=>{console.log("current chrome storage",e)}))}"toggle-block-or-not"===e.message&&(console.log("user is toggleing a blocked site",e.toggleSite),chrome.storage.sync.get(["blocked"],(o=>{if(o.blocked.find((o=>o===e.toggleSite))){const t=o.blocked.filter((o=>o!==e.toggleSite));chrome.storage.sync.set({blocked:t})}else o.blocked.push(e.toggleSite),chrome.storage.sync.set({blocked:o.blocked})})))}catch(e){console.log(e)}}))},listenToStorage:function(){return e.onChanged.addListener((async function(e,o){for(let[t,{oldValue:s,newValue:r}]of Object.entries(e))console.log(`Storage key "${t}" in namespace "${o}" changed.`,`Old value was "${JSON.stringify(s)}", new value is "${JSON.stringify(r)}".`)}))},listenToTabs:function(){return o.onUpdated.addListener((function(o,t){console.log("listening to tabs, tabID",o),chrome.tabs.query({active:!1},(e=>{e.reduce(((e,o)=>e.lastAccessed>o.lastAccessed?e:o))})),chrome.storage.sync.get(null,(s=>{const{currentSession:r,alarmCreated:n,sessionComplete:a,sessionTime:c,timerOn:i}=s,l=t.pendingUrl||t.url;if(!l||!l.startsWith("http"))return;const m=new URL(l).hostname;e.sync.set({userAttempt:m}),e.sync.get(["blocked","currUser"],(async function(e){const{blocked:t,currUser:s}=e;if(console.log("blocked:",t),console.log("currUser:",s),Array.isArray(t)&&t.find((e=>e.includes(m)))){const e={method:"post",headers:{"Content-type":"application/x-www-form-urlencoded; charset=UTF-8"},body:`userAttempted=${m}&userId=${s}`};try{await fetch("https://pomodoro-go-1.herokuapp.com/api/blocks",e)}catch(e){console.error("Request failed",e)}chrome.tabs.update(o,{url:"https://pomodoro-go-1.herokuapp.com/uhoh"})}}))}))}))},listenForBlockedSite:function(){return chrome.tabs.onUpdated.addListener((function(e,o){o.url&&new Promise((e=>{chrome.storage.local.get(["blackList"],(o=>{e(o.blackList)}))})).then((t=>{t&&t.includes(o.url)&&chrome.tabs.update(e,{url:"https://pomodoro-go-1.herokuapp.com/uhoh"})}))}))},listenForAlarm:function(){return chrome.alarms.onAlarm.addListener((function(e){console.log("alarm in background"),chrome.notifications.create(void 0,{type:"basic",title:"Your focus session is complete!",message:"Nice job! You deserve a break!",iconUrl:"logo-pomo.png",requireInteraction:!0,silent:!1},(()=>{console.log("last error: ",chrome.runtime.lastError)})),chrome.storage.local.set({alarmCreated:!1,currentSession:{},timerOn:!1,sessionTime:0,sessionComplete:!0})}))},listenForDashboardRedirect:function(){return chrome.notifications.onButtonClicked.addListener((async(e,o)=>{let t=await this.getCurrentTab();chrome.tabs.update(t.id,{url:"https://pomodoro-go-1.herokuapp.com/dashboard"})}))}}.init()})();
//# sourceMappingURL=background.js.map
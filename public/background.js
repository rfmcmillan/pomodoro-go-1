(()=>{"use strict";function e(e){chrome.storage.local.set({isRunning:e})}function t(e){const t={timer:e};return new Promise((e=>{chrome.storage.local.set(t,(()=>{e()}))}))}const{storage:o,tabs:s,runtime:r,alarms:n,scripting:a}=chrome;chrome.action.onClicked.addListener((e=>{chrome.tabs.create({url:"index.html"})})),{active:!1,currentTab:null,sessionTime:0,appStarted:!1,getCurrentTab:async function(){let[e]=await chrome.tabs.query({active:!0,currentWindow:!0});return e},init:async function(){try{this.active||(console.log("running app!"),o.sync.clear(),e(!1),t(null),n.clearAll((()=>{console.log("alarms are cleared")})),this.listenForAlarm(),this.listenToExternalMessages(),this.listenToStorage(),this.listenToTabs(),this.listenForBlockedSite(),this.listenForDashboardRedirect(),this.active=!0),this.currentTab=await this.getCurrentTab()}catch(e){console.log("issue with start up in background js",e)}},createAlarm:function(){chrome.alarms.create("timer",{when:Date.now()+this.sessionTime}),this.alarmCreated=!0,chrome.storage.sync.set({alarmCreated:!0})},resetStorage(){o.local.set({sessionTime:0,timerOn:!1,currentSession:{},alarmCreated:!1,sessionComplete:!1,user:{},email:""})},listenToExternalMessages:function(){return r.onMessageExternal.addListener((async(e,t,o)=>{try{if("create-timer"===e.message&&(this.sessionTime=e.sessionTime,this.createAlarm()),"continue-alarm"===e.message&&(console.log("you want me to start an alarm?"),n.clearAll((()=>{console.log("alarms are cleared again"),n.create("timer",{when:Date.now()+e.sessionTime}),console.log("new alarm created")}))),"timer-done"===e.message&&n.create("timer",{when:Date.now()}),"set-blocked-sites"===e.message){console.log("set-blocked-sites message received");const t=[];e.blockedSites.forEach((e=>{t.push(e.siteUrl)})),chrome.storage.sync.set({blocked:t,currUser:e.currUser},(()=>{console.log("sites are blocked in chrome")})),console.log("blocked sites",e),chrome.storage.sync.get(null,(e=>{console.log("current chrome storage",e)}))}"toggle-block-or-not"===e.message&&chrome.storage.sync.get(["blocked"],(t=>{if(t.blocked.find((t=>t===e.toggleSite))){const o=t.blocked.filter((t=>t!==e.toggleSite));chrome.storage.sync.set({blocked:o})}else t.blocked.push(e.toggleSite),chrome.storage.sync.set({blocked:t.blocked})}))}catch(e){console.log(e)}}))},listenToStorage:function(){return o.onChanged.addListener((async function(e,t){for(let[o,{oldValue:s,newValue:r}]of Object.entries(e))console.log(`Storage key "${o}" in namespace "${t}" changed.`,`Old value was "${JSON.stringify(s)}", new value is "${JSON.stringify(r)}".`)}))},listenToTabs:function(){return s.onUpdated.addListener((function(e,t){console.log("listening to tabs, tabID",e),chrome.tabs.query({active:!1},(e=>{e.reduce(((e,t)=>e.lastAccessed>t.lastAccessed?e:t))})),chrome.storage.sync.get(null,(s=>{const{currentSession:r,alarmCreated:n,sessionComplete:a,sessionTime:c,timerOn:i}=s,l=t.pendingUrl||t.url;if(!l||!l.startsWith("http"))return;const m=new URL(l).hostname;o.sync.set({userAttempt:m}),o.sync.get(["blocked","currUser"],(async function(t){const{blocked:o,currUser:s}=t;if(Array.isArray(o)&&o.find((e=>e.includes(m)))){const t={method:"post",headers:{"Content-type":"application/x-www-form-urlencoded; charset=UTF-8"},body:`userAttempted=${m}&userId=${s}`};try{await fetch("https://pomodoro-go-1.herokuapp.com/api/blocks",t)}catch(e){console.error("Request failed",e)}chrome.tabs.update(e,{url:"https://pomodoro-go-1.herokuapp.com/uhoh"})}}))}))}))},listenForBlockedSite:function(){return chrome.tabs.onUpdated.addListener((function(e,t){t.url&&new Promise((e=>{chrome.storage.local.get(["blackList"],(t=>{e(t.blackList)}))})).then((o=>{o&&o.includes(t.url)&&chrome.tabs.update(e,{url:"https://pomodoro-go-1.herokuapp.com/uhoh"})}))}))},listenForAlarm:function(){return chrome.alarms.onAlarm.addListener((function(e){"startTimer"===e.name&&(chrome.notifications.create(void 0,{type:"basic",title:"Your focus session is complete!",message:"Nice job! You deserve a break!",iconUrl:"logo-pomo.png",requireInteraction:!0,silent:!1},(()=>{console.log("last error: ",chrome.runtime.lastError)})),chrome.storage.local.set({alarmCreated:!1,currentSession:{},timerOn:!1,sessionTime:0,sessionComplete:!0}))}))},listenForDashboardRedirect:function(){return chrome.notifications.onButtonClicked.addListener((async(e,t)=>{let o=await this.getCurrentTab();chrome.tabs.update(o.id,{url:"https://pomodoro-go-1.herokuapp.com/dashboard"})}))}}.init(),chrome.alarms.create("oneSecond",{periodInMinutes:1/60}),chrome.alarms.onAlarm.addListener((o=>{"oneSecond"===o.name&&chrome.storage.local.get(["isRunning","timer"],(o=>{console.log("res.timer in background.js:",o.timer),console.log("res.isRunning:",o.isRunning);const s=o.timer??0;0!==s?o.isRunning&&(!function(e){const t={displayTime:e};new Promise((e=>{chrome.storage.local.set(t,(()=>{e()}))}))}((e=>{let t=e/1e3,o=parseInt(t/3600);t%=3600;let s=parseInt(t/60);return t%=60,o=o<10?"0"+o:o,s=s<10?"0"+s:s,t=t<10?t>=0?"0"+t:"00":t,o+":"+s+":"+t})(s-1e3)),console.log("time in background.js:",s),t(s-1e3)):e(!1)}))}))})();
//# sourceMappingURL=background.js.map